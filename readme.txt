This is a framework for the development and evaluation of content-based image recognition systems. It is a major refactoring of the ImageFARMER system available at http://imagefarmer.org/, intended to provide essentially the same functionality in a more user-friendly form. It exists in part as coding practice, and in part out of a desire to improve the usability and extensibility of the original product after first hand experience working with it.

%%%%%%%%%%%%%%%%%%%%%
% Acknowledgments
%%%%%%%%%%%%%%%%%%%%%
Juan Banda is the author of the original version of this software, which was part of his doctoral thesis, "Framework for Creating Large-Scale Content-based Image Retrieval System (CBIR) for Solar Data Analysis."

I would also like to thank Dr. Banda and Dr. Rafal Angryk for their mentorship during my time at Montana State University.

Dr. Banda's code is extended under the terms of the GPL, and all new work contributed is also licensed under GPL v.3

%%%%%%%%%%%%%%%%%%%%%
% Major Changes
%%%%%%%%%%%%%%%%%%%%%

Refactoring changes:
    - Many variables, files and functions were renamed for clarity.
    - Reduced redundancy and code repetition
    - Simplified methods where possible
    - Vectorized matlab code to improve speed and concision

functional changes:
    - Removed hard coded parameter values, and pulled all configuration parameters into a single file for consistency.
	   - This includes functions used in each module, such as the feature functions, or distance measures, or dimensionality reduction functions.
       - See below for details on how to provide options for configuration parameters.
    - Removed Fractal Dimension from default DR distances - the function used was inappropriate for the purposes needed, leading to meaningless output.

bug fixes:
    - Fixed a bug in Feature Extraction where image segment grids were being calculated as (1,80),(80,160),etc., instead of (1,80),(81,160).

%%%%%%%%%%%%%%%%%%%%%%%%
% Software Overview
%%%%%%%%%%%%%%%%%%%%%%%%

This software is designed to construct content-based image recognition systems, with a focus on enabling easy comparison of the effect different image features, image comparison measures, and dimensionality reduction techniques have on the success of the system. It is split up into four modules: Feature Extraction, Attribute Evaluation Dissimilarity Measures, and Dimensionality Reduction. The Feature Extraction Module must be run first processes an image dataset, deriving the chosen features from the raster data and producing a set of feature vectors. The remaining modules provide further exploration and analysis of those feature vectors. Once Feature Extraction is complete, any of these three modules can be run independently of each other. Each module will be elaborated below.

%% Global Configuration Settings

While the original ImageFARMER necessitated manually editing the module files to change the parameters of the created framework (sometimes requiring editing the same variable in 3 or 4 places), now all of the CBIR parameters have been moved into a struct generated by the function cbir_config. There are two ways to edit these parameters. The first is to simply edit the function file. The second is to provide a struct as input to the function. Any fields in the input struct that match fields in the file will be overwritten. Fields not provided in the input remain at their default setting. 

The following details the uses of parameters output by cbir_config() that are used by multiple modules. Module-specific configuration options will be detailed in their respective sections.

**NOTE 1**
Note that for many options, the default setting is derived relative to some other parameter. For example, the default folder for Dissimilarity Measure output is '[Base output folder]\DM'. If the base parameter is changed via input struct and no value is specified for the derived parameter, the derived value will change to reflect the new base value. 

**NOTE 2**
Several options determining which parts of a module run are runStatus variables. runStatus is enumerated type, which can have one of three states: 
  - runStatus.skip: never execute
  - runStatus.overwrite: always execute
  - runStatus.runIfMissing: execute only if there is not currently any file with the target filename


==useFile==
a boolean value that representing whether the images and class labels are specified in a file. 

If a file is used it must have the format

image1 Path (either absolute or relative to current MATLAB path)
image1 class
image2 Path
image2 class
etc.

If no file is used, it is assumed that the images are organized into folders as

top folder (datasetDir)
  folder named after class A
    image of class A
    image of class A
  folder named after class B
   image of class B
   image of class B
  etc.

If this parameter is set to true, the 'DatasetDir' option will be ignored. If it is set to false, 'imageListFile' will be ignored.
 
==numSegments==
an integer specifying how finely the images are divided for feature extraction. See the Feature Extraction section for more detail

==dataSet==
A string naming the dataset being manipulated. It is used in naming output files.

==dataSetForPlots==
A string naming the dataset being manipulated. It is used in the titles of Matlab plots produced as output. by default, simply escapes underscores in the previous parameter to avoid creating subscripts inadvertently.

==extension==
String naming the extension of dataset images. If useFile is false, this is used during Feature Extraction to find all images in the class folders.

==datasetDir==
String naming the root folder of the dataset being manipulated. Only used when useFile is false.

==outputDir==''
String naming the base folder of outputs. 

==imgFeatureNames==
A cell array of strings detailing the names of the features used to characterize the images in the dataset. Used in naming output files

==imgFeatureFunctions==
A cell array of handles to the functions to be used for feature extraction. Functions should take an arbitrarily sized 2D array as input, and output a 1xm array of scalar values

==imgFeatureFuncParams==
A cell array of cells arrays, containing any parameters needed by the feature functions above. Any parameters must come after the image array in the signature of the feature function.

==imageListFile==
The location of the file listing the images of the dataset and their associated classes. ignored when useFile is false.

==numFeatures==length(imgFeatureFunctions);
Integer number of feature functions used.

==FDPath==
String containing path where extracted Feature Data will be saved.

==imageClassLabelsPath==
String containing path where image class labels will be saved, so they don't have to be re-derived from file/folder structure for each module.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Feature Extraction Module
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The feature extraction module produces a vector for each image in the dataset intended to characterize the image so its similarity to other images can be measured. To do this, first the image is broken into an nxn set of equally sized rectangular segments. Next, each of the feature functions is applied to each of the segments, and all of the resulting values are concatenated into one feature vector representing the image.

Any function that takes a 2D array and outputs some number of scalar values can be used in the module. However, there are some limitations:
  - The grid-based extraction will produce feature vectors that are inherently bound to the spatial structure of the image. Two images will have similar values in a feature vector component only if they have the similar feature values in the same relative position. Region or object based comparisons are not naturally supported by this extraction method.
  - The raster data being processed is expected to be two dimensional, which makes representing color images and using color-based features difficult.
  - All features must be extracted on the same segmentation.

%% Feature Extraction Configuration Options

==FE_featureDataOverwrite==
Boolean that will force the recalculation of feature data, even if it's already been extracted. Otherwise, the data will be loaded from the existing extraction.

==FE_wekaWrite_fullFD==
runStatus variable that that determines if the module outputs Weka format files for the full Feature Data.

==FE_wekaWrite_singleFeature==
runStatus variable that that determines if the module outputs Weka format files for each individual feature's data.

==FE_writeFeatureImages==
runStatus variable that that determines if the module outputs images visualizing the extracted features.

==FE_readFunction==
Handle of function used to read the image files. This function must take a path and return a single 2D array. MATLAB's imread is suitable for greyscale images. For color images, some transformation to a single array is necessary, e.g. @(path) rgb2gray(imread(path)). This parameter can also be changed if you need to read from filetypes other than images, e.g. text files storing image-like data, or if preprocessing of the images is desired.

==FE_readFunctionParameters==
Cell array of parameter (other than path) to the function above. If the function takes additional parameters, they must come after the path

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Attribute Evaluation Module
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The attribute evaluation module uses the correlation amongst the various image features to offer a measure of the usefulness of those features. Those features which are highly correlated may be redundant, and one or the other could be eliminated without compromising system accuracy. 
Two correlations are measured:
   - The average correlation of each feature within a single class
   - The correlation between the each parameter in the images of one class versus each parameter in all images that are not of that class.
%% Attribute Evaluation Configuration Options

==AE_outputDir==
String of path to folder where module output is saved. defaults to '[outputDir]\AE'



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Dissimilarity Measures Module
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This module takes the feature vectors extracted by the FE module and explores them using using specified distance functions. This is done through the following techniques:
- For each function, the matrix of the distances every image via that function is visualized as a color map.
- Multi-Dimensional scaling (MDS) is applied to the inter-image distances to embed them in a new linear space. 
- 2D and 3D projections onto the first 2/3 dimensions of the embedding are plotted.
- The Maximum absolute value of each MDS dimension across the embedded feature vectors is plotted against the MDS dimensions.
- The sum of the absolute value of each MDS dimension across the embedded feature vectors is plotted against the MDS dimensions.
- an exponential curve is fit to the sum series above, and this curve is plotted against the MDS dimensions.
- the values of the slope (i.e. derivative) of the fit curve are derived and plotted against the MDS dimensions.

The module then does a simple Dimensionality reduction by taking some number n of the MDS dimensions, and keeping only the first n values for each projected feature vector.This n is picked in two ways
- via a user specified number of dimensions
- via an angle specifying a slope. if the tangent of the fit curve goes below the threshold angle, all further dimensions are removed

%% Dissimilarity Measures Configuration Options

==DM_distanceNames==
Cell array of strings naming the different distances. Used for constructing output filenames.

==DM_distanceFunctions==
Cell array of the distances used to compare image feature vectors. These can be any input acceptable to MATLAB's builtin pdist function, i.e. a string indicating a built-in option, or a function handle of an appropriate custom distance function. To quote MATLAB documentation:

"A distance function must be of form
   d2 = distfun(XI,XJ)

taking as arguments a 1-by-n vector XI, corresponding to a single row of X, and an m2-by-n matrix XJ, corresponding to multiple rows of X. distfun must accept a matrix XJ with an arbitrary number of rows. distfun must return an m2-by-1 vector of distances d2, whose kth element is the distance between XI and XJ(k,:)."

==DM_tang_thres==
The tangent angle used to derive a number of dimensions threshold .

==DM_component_thresholds==
%flat component thresholds. inputting a row vector here will run each value separately.

==DM_plot== = runStatus.runIfMissing;
runStatus variable that that determines if the module outputs the various plots detailed above.

==DM_weka_write==
runStatus variable that that determines if the module outputs Weka format files for the reduced MDS projections.

==DM_outputFolder==
String of path to folder where module output is saved. defaults to '[outputDir]\DM'.

==DM_MDS_plotColors==
nx3 array of RGB triples (0-255) indicating colors to be used for drawing text on the MDS images. Each class receives a different color. The current cbir_config() provides 12 colors selected for good contrast. If the image dataset used has more than 12 classes, a substitute set of colors will need to be provided. If the number of colors in the array is greater than the number of classes, the module will only use as many colors as needed (colors are selected in order of increasing index in the array).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Dimensionality Reduction Module
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This module applies dimensionality reduction techniques to the feature vectors produced be the Feature Extraction module. The goal of dimensionality reduction is to take a set of vectors and mapping them to a new, smaller vector space while preserving the inter-vector distances as much as possible. In CBIR, it is useful for reducing the amount of disk space necessary to store the feature-based representations of the images, ideally without reducing the success of the system.

A key factor of dimensionality reduction is deciding how many dimensions to reduce to. Indeed, many techniques require an explicit dimensionality target as input. This module allows users to specify a static number of dimensions to reduce to, but it also provides a technique for selecting the target dimensionality dynamically. To do this, the module performs Principal Component Analysis and Singular Vector Decomposition on the feature data. These methods construct mappings that identify which facets of the data create the most variance in the component values. Using a user specified percentage of variance, the module selects, from both mappings, the number of dimensions required to capture at least that much variance. Once the target number of dimensions is determined, the reduction techniques are applied.

%% Dimensionality Reduction Configuration Options

==DR_plotDimensionSelection==
runStatus variable that that determines if module outputs plots and pareto charts of the variance against number of dimensions for the dimensionality selection methods.

==DR_fixedDimensions==
An integer row vector listing the desired fixed target dimensionalities. Each element of the vector will cause a separate reductions, producing a separate output.

==DR_varianceThresholds== 
A numerical row vector listing percentages of variance used to pick number a number of dimensions to reduce to. Each element of the vector will cause a separate reductions, producing a separate output.

==DR_weka_write==
runStatus variable that that determines if module outputs weka files of the dimensionally reduced data.

==DR_methodNames==
Cell array of strings naming the different dimensionality reduction techniques. Used for constructing output filenames.

==DR_functions==
Cell array of function handles to dimensionality reduction functions. 
Function format is [mappedX,mappedY] = f(X,Y,numDims) 
  - X is an array of 'training' row vectors used to construct the dimensional mapping for the original space to a smaller one.
  - Y is a second array of 'test' row vectors that is mapped to the space constructed using X. 
  - numDims is the number of dimensions the target space is desired to have.

==DR_outputDir==
String of path to folder where module output is saved. defaults to '[outputDir]\DR'.

==DR_skipRCONDWarnings==
Boolean; If true, suppresses 'ill-conditioned matrix' warnings from inv() when running the module. Certain DR techniques (like Factor Analysis) tend to produce many 'ill-conditioned matrix' warnings on some datasets. Although this probably indicates that the data isn't working with the technique well, which is valuable to know, that information can overwhelm other outputs.

